/*
 * Copyright (C)2014-2020 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package js.node;

import haxe.Constraints.Function;

extern class Error {
	/**
		Creates a new `Error` object and sets the `error.message` property to the provided text message.
		If an object is passed as `message`, the text message is generated by calling `message.toString()`.
		The `error.stack` property will represent the point in the code at which `new Error()` was called.
		Stack traces are dependent on V8's stack trace API.
		Stack traces extend only to either
		(a) the beginning of synchronous code execution, or
		(b) the number of frames given by the property `Error.stackTraceLimit`, whichever is smaller.

		@see https://nodejs.org/api/errors.html#errors_new_error_message
	**/
	function new(message:String);

	/**
		Creates a `.stack` property on `targetObject`, which when accessed returns
		a string representing the location in the code at which `Error.captureStackTrace()` was called.

		@see https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt
	**/
	public static function captureStackTrace(targetObject:Class<Dynamic>, ?constructorOpt:Function):Void;

	/**
		The `Error.stackTraceLimit` property specifies the number of stack frames collected by a stack trace
		whether generated by `new Error().stack` or `Error.captureStackTrace(obj)`).

		@see https://nodejs.org/api/errors.html#errors_error_stacktracelimit
	**/
	public static var stackTraceLimit(default, never):Int;

	/**
		The `error.code` property is a string label that identifies the kind of error.
		`error.code` is the most stable way to identify an error.
		It will only change between major versions of Node.js.
		In contrast, `error.message` strings may change between any versions of Node.js.
		See `Node.js Error Codes` for details about specific codes.

		@see https://nodejs.org/api/errors.html#errors_error_code
	**/
	public var code(default, never):String;

	/**
		The `error.message` property is the string description of the error as set by calling `new Error(message)`.
		The `message` passed to the constructor will also appear in the first line of the stack trace of the `Error`
		however changing this property after the `Error` object is created may not change the first line of the stack trace
		(for example, when `error.stack` is read before this property is changed).

		@see https://nodejs.org/api/errors.html#errors_error_message
	**/
	public var message(default, never):String;

	/**
		The `error.stack` property is a string describing the point in the code at which the `Error` was instantiated.

		@see https://nodejs.org/api/errors.html#errors_error_stack
	**/
	public var stack(default, never):String;
}
// TODO: define Common System Error and Node.js Error Codes
// * https://nodejs.org/api/errors.html#errors_common_system_errors
// * https://nodejs.org/api/errors.html#errors_node_js_error_codes
